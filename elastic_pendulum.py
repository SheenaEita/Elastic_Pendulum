# -*- coding: utf-8 -*-
"""Elastic_pendulum.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bSVbX4Q9NwkWkEdDw2MViT4OzAAkaPaW

# Import Some Package
To facilitate the use of some matrix and symbolic operations, we need to import numpy and sympy.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint as inte
import sympy as sym

from matplotlib import animation
from matplotlib.animation import PillowWriter

import math
from math import e
from math import pi

"""# Define Parameters"""

t, m, g, k, l = sym.symbols('t, m, g, k, l')
r, theta = sym.symbols(r'r \theta', cls=sym.Function)

"""# System Coordinaates"""

r = r(t)
theta = theta(t)
r_d = sym.diff(r, t)
theta_d = sym.diff(theta, t)
r_dd = sym.diff(r_d, t)
theta_dd = sym.diff(theta_d, t)

theta_dd

"""# Coordinates Transformation"""

x = r * sym.cos(theta)
y = r * sym.sin(theta)

x_d = sym.diff(x, t)
y_d = sym.diff(y, t)

y

"""# Lagrangian"""

T = 0.5*m*(x_d**2 + y_d**2);
# T = 1/2 * m * (x_dot^2 + y_dot^2);

V = m*g*y + 0.5*k*(r-l)**2;
# V = mgz + 1/2 * k * (r-l)^2 ;

L = T - V;

L

"""# Lagrangian Equation"""

LE1 = sym.diff(L, r) - sym.diff(sym.diff(L, r_d), t).simplify()
LE2 = sym.diff(L, theta) - sym.diff(sym.diff(L, theta_d), t).simplify()

LE1

"""Find \ddot{r} and \ddot{ùúÉ}"""

sols = sym.solve([LE1, LE2], (r_dd, theta_dd), simplify=False, rational=False)

sols

"""# State Space"""

d2rdt2_f = sym.lambdify((t, m, g, k, l, r, theta, r_d, theta_d), sols[r_dd])
d2thetadt2_f = sym.lambdify((t, m, g, k, l, r, theta, r_d, theta_d), sols[theta_dd])
drdt_f = sym.lambdify(r_d, r_d)
dthetadt_f = sym.lambdify(theta_d, theta_d)

def dSdt(S, t, m, g, k, l):
    r, r_d, theta, theta_d = S
    return [
        drdt_f(r_d),
        d2rdt2_f(t, m, g, k, l, r, theta, r_d, theta_d),
        dthetadt_f(theta_d),
        d2thetadt2_f(t, m, g, k, l, r, theta, r_d, theta_d),
    ]

"""# Simulation"""

t = np.linspace(0, 10, 10001) # s
g = 9.81 #m/s^2
k = 200 # N/m
m = 2 # kg
l = 1 # m

ans = inte(dSdt, y0=[1, 0, -60*pi/180, 0], t=t, args=(m, g, k, l))

ans

r_result = ans.T[0]
theta_result = ans.T[2]

"""# Figure"""

plt.plot(t, r_result)

plt.plot(t, theta_result)